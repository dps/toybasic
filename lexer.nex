/LET/ {println("LET"); return LET;}
/IF/ {println("IF"); return IF;}
/THEN/ {println("THEN"); return THEN;}
/PRINT/ {println("PRINT"); return PRINT;}
/GOTO/ {println("GOTO"); return GOTO;}
/END/ {println("END"); return END;}
/</ {println("LT"); return LT;}
/<=/ {println("LE"); return LE;}
/>/ {println("GT"); return GT;}
/>=/ {println("GE"); return GE;}
/==/ {println("EQ"); return EQ;}
/!=/ {println("NE"); return NE;}
/[0-9]+/          {lval.num, _ = strconv.Atoi(yylex.Text()); println("An integer:", yylex.Text()); return INTEGER }
/[0-9]+\.[0-9]*/  { println("A float:", yylex.Text()) }
/"[^"]*"/ { lval.s = yylex.Text();println("A string:", yylex.Text()); return STRING; }
/[a-z]/  { println("An identifier:", yylex.Text()); lval.v = yylex.Text();  return VARIABLE }
/\+|-|\*|\/|=|\(|\)|,/      { println("An operator:", yylex.Text()); return int(yylex.Text()[0]);}
/[ \t]+/        { /* eat up whitespace */ }
/\n/ { println ("CR"); return CR;}
/./               { println("Unrecognized character:", yylex.Text()) }
//
package main
import "os"
import "strconv"
func main() {
  OpenOutput()
  WriteLeader()
  lex := NewLexer(os.Stdin)
  // NN_FUN(lex)
  //yyDebug        = 5
	yyErrorVerbose = true
  yyParse(lex)
  WriteTrailer()
}